--require'navigator'.setup({
--  debug = false,                                                                                           -- log output, set to true and log path: ~/.cache/nvim/gh.log
--  width = 0.75,                                                                                            -- max width ratio (number of cols for the floating window) / (window width)
--  height = 0.3,                                                                                            -- max list window height, 0.3 by default
--  preview_height = 0.35,                                                                                   -- max height of preview windows
--  border = {"‚ï≠", "‚îÄ", "‚ïÆ", "‚îÇ", "‚ïØ", "‚îÄ", "‚ï∞", "‚îÇ"},                                                       -- border style, can be one of 'none', 'single', 'double',
--                                                                                                           -- 'shadow', or a list of chars which defines the border
--  --on_attach = function(client, bufnr)
--  --  -- your hook
--  --end,
--  -- put a on_attach of your own here, e.g
--  -- function(client, bufnr)
--  --   -- the on_attach will be called at end of navigator on_attach
--  -- end,
--  -- The attach code will apply to all LSP clients
--
--  ts_fold = false,                                                                                         -- modified version of treesitter folding
--  default_mapping = true,                                                                                  -- set to false if you will remap every key or if you using old version of nvim-
--  --keymaps = {{key = "gK", func = vim.lsp.declaration, desc = 'declaration'}}, -- a list of key maps
--  -- this kepmap gK will override "gD" mapping function declaration()  in default kepmap
--  -- please check mapping.lua for all keymaps
--  treesitter_analysis = true,                                                                              -- treesitter variable context
--  treesitter_navigation = true,                                                                            -- bool|table false: use lsp to navigate between symbol ']r/[r', table: a list of
--  --lang using TS navigation
--  treesitter_analysis_max_num = 100,                                                                       -- how many items to run treesitter analysis
--  treesitter_analysis_condense = true,                                                                     -- condense form for treesitter analysis
--  -- this value prevent slow in large projects, e.g. found 100000 reference in a project
--  transparency = 50,                                                                                       -- 0 ~ 100 blur the main window, 100: fully transparent, 0: opaque,  set to nil or 100 to disable it
--
--  lsp_signature_help = true,                                                                               -- if you would like to hook ray-x/lsp_signature plugin in navigator
--  -- setup here. if it is nil, navigator will not init signature help
--  signature_help_cfg = nil,                                                                                -- if you would like to init ray-x/lsp_signature plugin in navigator, and pass in your own config to signature help
--  --icons = {
--  --  -- Code action
--  --  code_action_icon = "üèè", -- note: need terminal support, for those not support unicode, might crash
--  --  -- Diagnostics
--  --  diagnostic_head = 'üêõ',
--  --  diagnostic_head_severity_1 = "üà≤",
--  --  -- refer to lua/navigator.lua for more icons setups
--  --},
--  mason = true,                                                                                            -- set to true if you would like use the lsp installed by williamboman/mason
--  lsp = {
--    enable = true,                                                                                         -- skip lsp setup, and only use treesitter in navigator.
--                    -- Use this if you are not using LSP servers, and only want to enable treesitter support.
--                    -- If you only want to prevent navigator from touching your LSP server configs,
--                    -- use `disable_lsp = "all"` instead.
--                    -- If disabled, make sure add require('navigator.lspclient.mapping').setup({bufnr=bufnr, client=client}) in your
--                    -- own on_attach
--    code_action = {enable = true, sign = true, sign_priority = 40, virtual_text = true},
--    code_lens_action = {enable = true, sign = true, sign_priority = 40, virtual_text = true},
--    document_highlight = true,                                                                             -- LSP reference highlight,
--                               -- it might already supported by you setup, e.g. LunarVim
--    format_on_save = false,                                                                                -- {true|false} set to false to disasble lsp code format on save (if you are using prettier/efm/formater etc)
--                           -- table: {enable = {'lua', 'go'}, disable = {'javascript', 'typescript'}} to enable/disable specific language
--                              -- enable: a whitelist of language that will be formatted on save
--                              -- disable: a blacklist of language that will not be formatted on save
--                           -- function: function(bufnr) return true end to enable/disable lsp format on save
--    format_options = {async=true},                                                                         -- async: disable by default, the option used in vim.lsp.buf.format({async={true|false}, name = 'xxx'})
--    disable_format_cap = {},                                                                               -- a list of lsp disable format capacity (e.g. if you using efm or vim-codeformat etc), empty {} by default
--                                                            -- If you using null-ls and want null-ls format your code
--                                                            -- you should disable all other lsp and allow only null-ls.
--    disable_lsp = 'all',
--                                          -- if you use your own LSP setup, and don't want navigator to setup
--                                          -- any LSP server for you, use `disable_lsp = "all"`.
--                                          -- you may need to add this to your own on_attach hook:
--                                          -- require('navigator.lspclient.mapping').setup({bufnr=bufnr, client=client})
--                                          -- for e.g. denols and tsserver you may want to enable one lsp server at a time.
--                                          -- default value: {}
--    diagnostic = {
--      underline = true,
--      virtual_text = true,                                                                                 -- show virtual for diagnostic message
--      update_in_insert = false,                                                                            -- update diagnostic message in insert mode
--    },
--
--    hover = {
--      enable = true,
--      --keymap = {
--      --  ['K'] = {
--      --    go = function()
--      --      local w = vim.fn.expand('<cWORD>')
--      --      vim.cmd('GoDoc ' .. w)
--      --    end,
--      --    default = function()
--      --      local w = vim.fn.expand('<cWORD>')
--      --      vim.lsp.buf.workspace_symbol(w)
--      --    end,
--      --  },
--      --},
--    },
--
--    diagnostic_scrollbar_sign = {'‚ñÉ', '‚ñÜ', '‚ñà'},                                                           -- experimental:  diagnostic status in scroll bar area; set to false to disable the diagnostic sign,
--                                                 --                for other style, set to {'‚ïç', 'ÔÆÜ'} or {'-', '='}
--    diagnostic_virtual_text = true,                                                                        -- show virtual for diagnostic message
--    diagnostic_update_in_insert = false,                                                                   -- update diagnostic message in insert mode
--    disply_diagnostic_qf = true,                                                                           -- always show quickfix if there are diagnostic errors, set to false if you want to ignore it
--    tsserver = {
--      filetypes = {'typescript'} -- disable javascript etc,
--      -- set to {} to disable the lspclient for all filetypes
--    },
--    ctags ={
--      cmd = 'ctags',
--      tagfile = 'tags',
--      options = '-R --exclude=.git --exclude=node_modules --exclude=test --exclude=vendor --excmd=number',
--    },
--    servers = {},                                                                                          -- by default empty, and it should load all LSP clients avalible based on filetype
--    -- but if you whant navigator load  e.g. `cmake` and `ltex` for you , you
--    -- can put them in the `servers` list and navigator will auto load them.
--    -- you could still specify the custom config  like this
--    -- cmake = {filetypes = {'cmake', 'makefile'}, single_file_support = false},
--  }
--})
require("navigator").setup({
  default_mapping = false,
})

--Default Navigator keymaps
--mode	key	function
--vim.keymap.set('n',       'gr',            '', { desc = 'async references, definitions and context',                  silent = true })
--vim.keymap.set('n',       '<Leader>gr',    '', { desc = 'show reference and context',                                 silent = true })
--vim.keymap.set('i',       '<m-k>',         '', { desc = 'signature help',                                             silent = true })
--vim.keymap.set('n',       '<c-k>',         '', { desc = 'signature help',                                             silent = true })
--vim.keymap.set('n',       'gW',            '', { desc = 'workspace symbol fuzzy finder',                              silent = true })
--vim.keymap.set('n',       'gD',            '', { desc = 'declaration',                                                silent = true })
--vim.keymap.set('n',       'gd',            '', { desc = 'definition',                                                 silent = true })
--vim.keymap.set('n',       'gt',            '', { desc = 'type definition',                                            silent = true })
--vim.keymap.set('n',       'g0',            '', { desc = 'document symbol',                                            silent = true })
--vim.keymap.set('n',       '<C-]>',         '', { desc = 'go to definition (if multiple show listview)',               silent = true })
--vim.keymap.set('n',       'gp',            '', { desc = 'definition preview (show Preview)',                          silent = true })
--vim.keymap.set('n',       '<C-LeftMouse>', '', { desc = 'definition',                                                 silent = true })
--vim.keymap.set('n',       'g<LeftMouse>',  '', { desc = 'implementation',                                             silent = true })
--vim.keymap.set('n',       '<Leader>gt',    '', { desc = 'treesitter document symbol',                                 silent = true })
--vim.keymap.set('n',       '<Leader>gT',    '', { desc = 'treesitter symbol for all open buffers',                     silent = true })
--vim.keymap.set('n',       '<Leader> ct',   '', { desc = 'ctags symbol search',                                        silent = true })
--vim.keymap.set('n',       '<Leader> cg',   '', { desc = 'ctags symbol generate',                                      silent = true })
--vim.keymap.set('n',       'K',             '', { desc = 'hover doc',                                                  silent = true })
--vim.keymap.set('n',       '<leader>ca',    '', { desc = 'code action (when you see üèè )',                             silent = true })
--vim.keymap.set('n',       '<leader>la',    '', { desc = 'code lens action (when you see a codelens indicator)',       silent = true })
--vim.keymap.set('v',       '<leader>ca',    '', { desc = 'range code action (when you see üèè )',                       silent = true })
--vim.keymap.set('n',       '<leader>rn',    '', { desc = 'rename with floating window',                                silent = true })
--vim.keymap.set('n',       '<Leader>re',    '', { desc = 'rename (lsp default)',                                       silent = true })
--vim.keymap.set('n',       '<Leader>gi',    '', { desc = 'hierarchy incoming calls',                                   silent = true })
--vim.keymap.set('n',       '<Leader>go',    '', { desc = 'hierarchy outgoing calls',                                   silent = true })
--vim.keymap.set('n',       'gi',            '', { desc = 'implementation',                                             silent = true })
--vim.keymap.set('n',       '<leader> D',    '', { desc = 'type definition',                                            silent = true })
--vim.keymap.set('n',       'gL',            '', { desc = 'show line diagnostic',                                       silent = true })
--vim.keymap.set('n',       'gG',            '', { desc = 'show diagnostic for all buffers',                            silent = true })
--vim.keymap.set('n',       ']d',            '', { desc = 'next diagnostic',                                            silent = true })
--vim.keymap.set('n',       '[d',            '', { desc = 'previous diagnostic',                                        silent = true })
--vim.keymap.set('n',       '<Leader> dt',   '', { desc = 'diagnostic toggle(enable/disable)',                          silent = true })
--vim.keymap.set('n',       ']r',            '', { desc = 'next treesitter reference/usage',                            silent = true })
--vim.keymap.set('n',       '[r',            '', { desc = 'previous treesitter reference/usage',                        silent = true })
--vim.keymap.set('n',       '<leader> wa',   '', { desc = 'add workspace folder',                                       silent = true })
--vim.keymap.set('n',       '<leader> wr',   '', { desc = 'remove workspace folder',                                    silent = true })
--vim.keymap.set('n',       '<leader> wl',   '', { desc = 'print workspace folder',                                     silent = true })
--vim.keymap.set('n',       '<Leader>k',     '', { desc = 'toggle reference highlight',                                 silent = true })
--vim.keymap.set('n',       '<Ctrl-w>j',     '', { desc = 'move cursor to preview (windows move to bottom view point)', silent = true })
--vim.keymap.set('n',       '<Ctrl-w>k',     '', { desc = 'move cursor to list (windows move to up view point)',        silent = true })
--vim.keymap.set('n',       '<C-v>',         '', { desc = 'open preview file in nvim with vsplit',                      silent = true })
--vim.keymap.set('n',       '<C-s>',         '', { desc = 'open preview file in nvim with split',                       silent = true })
--vim.keymap.set('n',       '<Enter>',       '', { desc = 'open preview file in nvim/Apply action',                     silent = true })
--vim.keymap.set('n',       '<ESC>',         '', { desc = 'close listview of floating window',                          silent = true })
--vim.keymap.set('n',       '<C-q>',         '', { desc = 'close listview and send results to quickfix',                silent = true })
--vim.keymap.set({'i','n'}, '<C-o>',         '', { desc = 'open preview file in nvim/Apply action',                     silent = true })
--vim.keymap.set({'i','n'}, '<C-e>',         '', { desc = 'close listview of floating window',                          silent = true })
--vim.keymap.set({'i','n'}, '<C-p>',         '', { desc = 'previous item in list',                                      silent = true })
--vim.keymap.set({'i','n'}, '<C-n>',         '', { desc = 'next item in list',                                          silent = true })
--vim.keymap.set({'i','n'}, '<Up>',          '', { desc = 'previous item in list',                                      silent = true })
--vim.keymap.set({'i','n'}, '<Down>',        '', { desc = 'next item in list',                                          silent = true })
--vim.keymap.set({'i','n'}, '<C-b>',         '', { desc = 'previous page in listview',                                  silent = true })
--vim.keymap.set({'i','n'}, '<C-f>',         '', { desc = 'next page in listview',                                      silent = true })
--vim.keymap.set({'i','n'}, '<C-s>',         '', { desc = 'save the modification to preview window to file',            silent = true })
--vim.keymap.set({'i','n'}, number '1~9',    '', { desc = 'move to ith row/item in the list', silent = true })
